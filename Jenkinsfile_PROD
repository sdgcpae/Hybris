pipeline {
        agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: hybris
    image: signet/hybris-ant:1811_21-V8
    command: 
    - /bin/bash
    tty: true	
  - name: maven
    image: maven:3.6.1-slim
    command: 
    - cat
    tty: true
'''
            label 'sample-java-app'
            idleMinutes 10
            defaultContainer 'jnlp'
        }
    }  

		
    	stages {
        
		stage('Build') {
            		steps {
			
				container('hybris') {
					
					script{
						propfile = readProperties(file: './project.properties_PROD')
						ccv2_sub=propfile['ccv2_sub'] 
    						ccv2_database_strategy=propfile['ccv2_database_strategy'] 
    						ccv2_database_update_mode=propfile['ccv2_database_update_mode']
    						ccv2_env_code=propfile['ccv2_env_code']
    						ccv2_branch=propfile['ccv2_branch']
					}
			
                    			sh '''
                        			#!/bin/bash
						export JAVA_HOME=/app/sapjvm8/sapjvm_8/
                        			java -version
                        			pwd
						cd /
						ls 
						cd /hybris-commerce-suite/
						ls
						ps -ef | grep java
						cd /app/sapjvm8
						ls
                        
                        			mkdir -p /hybris-commerce-suite/hybris/bin/custom/
			
                        			cp -R /$WORKSPACE/bin/custom/ /hybris-commerce-suite/hybris/bin/custom/
						cd /hybris-commerce-suite/hybris/bin/custom/
						ls
						echo "Remove packaged jacoco data file"
  						rm -f /hybris-commerce-suite/hybris/log/junit/jacoco.exec
						
						echo "Replace ojdbc jar here"
						// cp -v $HYBRIS_PACKAGES/ojdbc7.jar $HYBRIS_HOME/hybris/bin/platform/lib/dbdriver/ojdbc7.jar; 
						
						echo " Create symlinks to environment sprcific property files here" 
						
                        			cd /hybris-commerce-suite/hybris/bin/platform 
                        			. ./setantenv.sh
						java -version
						ant addonuninstall -Daddonnames=assistedservicestorefront,smarteditaddon,captchaaddon,profiletagaddon -DaddonStorefront.yacceleratorstorefront=signetstorefront
						ant addoninstall -Daddonnames=assistedservicestorefront,smarteditaddon,captchaaddon,profiletagaddon -DaddonStorefront.yacceleratorstorefront=signetstorefront
                        			ant customize clean build -Dinput.template=develop
						// ant production -Dproduction.legacy.mode=true -Dproduction.include.tomcat=true
            		
		                    	'''
		    			echo "Performing npm build..."
		    			sh '''
						cd /$WORKSPACE/bin/custom/signet/signetstorefront/
						pwd
						npm install
						grunt 
                   				//npm install -g grunt-cli
						//npm install grunt --save-dev
						//npm install grunt-contrib-less --save-dev
						//npm install grunt-contrib-watch --save-dev
						//npm install grunt-sync --save-dev
						//grunt
		    		
		    			'''	   
                 		} 
            		}   
        	}
		
		stage('Unit Test') {
            		steps {
				container('hybris') {

                    			sh '''
		    	
						export JAVA_HOME=/app/sapjvm8/sapjvm_8/
			
                        			cd /hybris-commerce-suite/hybris/bin/platform 
                        			. ./setantenv.sh
                        			ant unittests
			
					'''
			
					jacoco( 
			      			execPattern: '**/*.exec',
			      			classPattern: '**/*.class',
			      			sourcePattern: '**/*.java',
			      			exclusionPattern: '**/test*'
					)
			
                 		} 
            		}   
        	}
		
		stage('Code Quality') {
			when { expression {propfile['code_quality'] == "true" }}
            		environment {
                		scannerHome = tool 'Sonarqube'
            		}
            		steps {
				container('maven') {
                			withSonarQubeEnv(installationName:'Sonarqube') {
                    				sh ''' $scannerHome/bin/sonar-scanner -X -Dsonar.projectName=hybris_${BRANCH_NAME} -Dsonar.projectKey=hybris_sample -Dsonar.projectVersion=1.0 -Dsonar.qualityGate=Hybris_Sonar -Dsonar.host.url='https://sonarqube.sgnt.devops.accentureanalytics.com/' -Dsonar.exclusions=file:**/gensrc/**,**/*demo.html,web/webroot/**/web.xml,web/webroot/WEB-INF/config/**/*,web/webroot/WEB-INF/lib/**/*,web/webroot/WEB-INF/views/welcome.jsp,web/webroot/index.jsp,**/*BeforeViewHandler*.java,web/webroot/static/bootstrap/js/*.js,web/webroot/static/theme/js/*.js,web/webroot/signetsmarteditmodule/js/*.js,**/*Constants.java,**/jalo/**,**/email/context/**,**/*Form*.java,web/src/**,**/platform/**,src/com/hybris/yprofile/**,resources/apache-nutch-1.16-custom-code/apache-nutch-1.16/**,**/*.java
                    				'''
                			}
                			timeout(time: 10, unit: 'MINUTES') {
						//sleep(60)
                				waitForQualityGate abortPipeline: true
                			}
				}
            		}
        	}
	
		stage('Create Temp Branch') {
	
			when { expression { BRANCH_NAME == 'dev' || BRANCH_NAME == 'release' || propfile['feature_deploy'] == "true" } }
			steps {
				echo BRANCH_NAME 
				
				sh ' git remote -v'
				
				//sh 'git push --delete https://sdgcpsb:sureshnaga1@github.com/sdgcpsb/Hybris.git "ccv2_deploy_${BUILD_NUMBER}_${env.GIT_BRANCH}_${ccv2_env}" || true '
				//sh 'sleep 10'
				//sh 'git branch'
				//sh 'git branch -d "ccv2_deploy_${env.GIT_BRANCH}_${BUILD_NUMBER}_${ccv2_env}" || true'
				////sh 'git checkout -b "ccv2_deploy_${env.GIT_BRANCH}_${BUILD_NUMBER}_${ccv2_env}"'
				////sh 'git push -u https://sdgcpsb:sureshnaga1@github.com/sdgcpsb/Hybris.git '
				//sh ' git config remote.origin.url 'https://"sdgcpsb":"sureshnaga@123"@github.com/sdgcpsb/Hybris.git''
				//sh 'git push origin "temp_$BRANCH_NAME_$BUILD_NUMBER"'
				//sh ' git push origin "temp_$BRANCH_NAME_$BUILD_NUMBER" , credentialsId: 'git_creds' '
				
			}
		}
	    
		stage('Deploy') {
			when { expression {env.GIT_BRANCH == 'dev' || propfile['ondemand_deploy'] == "true" }}
            		steps {
				container('hybris') {
					
					echo "I am executing Deploy to target environment."
					sh '''	
					cd /app/sap_cli/bin/
					export JAVA_HOME=/app/sapmachine-jdk-11.0.10/
					./sapccm --help
					
            				echo "Authenticating"
            				./sapccm config set auth-credentials 621ae91d71a817f858ad378177a333e
					
            				echo "Creating Build"
            				./sapccm build create  --application-code="commerce-cloud" --branch=$ccv2_branch --name="JENKINS_$JOB_NAME-BLD_$BUILD_NUMBER"  --no-wait  --subscription-code=${ccv2_sub}
            				retVal=$?
            				if [ $retVal -ne 0 ]; then
              					echo "CCv2 Build Error..."
              					exit $retVal
            				fi
            				sleep 90
            				ccv2_build_code=`./sapccm build list --subscription-code=${ccv2_sub} |grep "JENKINS_$JOB_NAME-BLD_$BUILD_NUMBER"|cut -d' ' -f1`
            				if [ "$ccv2_build_code" == "" ]; then
              					ccv2_build_code=`./sapccm build list --subscription-code=${ccv2_sub} |grep "JENKINS_$JOB_NAME-BLD_$BUILD_NUMBER"|cut -d' ' -f1`
            				fi
            				if [ "$ccv2_build_code" == "" ]; then
              					echo; echo "Error getting build code..."; echo
              					exit 1
            				fi
            				echo "##########################"
            				echo "Build Code: ${ccv2_build_code}"
            				echo "##########################"
            				echo
            				./sapccm build show --subscription-code=${ccv2_sub} --build-code=${ccv2_build_code}
            				END_SIGN="No"
            				END=135
            				for i in $(seq 1 $END)
            				do 
            				echo $i
            				BUILD_STATUS=`./sapccm build show --subscription-code=${ccv2_sub} --build-code=${ccv2_build_code} |grep -v "CREATED BY"`
            				echo ${BUILD_STATUS}
            				BUILD_SUCCESS=0
            				BUILD_SUCCESS=`echo ${BUILD_STATUS}|grep "SUCCESS" |wc -l`
            				if [[ ${BUILD_SUCCESS} > 0 ]]; then
              					date ; echo 
              					echo "CCv2 Build completed successfully..."; echo
              					END_SIGN="No"
              					break
            				fi
            				BUILD_FAIL=0
            				BUILD_FAIL=`echo ${BUILD_STATUS}|grep "FAIL" |wc -l`
            				if [[ ${BUILD_FAIL} > 0 ]]; then
              					./sapccm build logs --build-code=${ccv2_build_code} --file-path=$WORKSPACE/${ccv2_build_code}.zip --subscription-code=${ccv2_sub}
              					cd $WORKSPACE
              					unzip ${ccv2_build_code}.zip
              					tail -800 releaselog-${ccv2_build_code}.txt
              					date ; echo
              					echo "CCv2 Build failed..."; echo
              					rm -rf ${ccv2_build_code}.zip releaselog-${ccv2_build_code}.txt
              					exit 1
            				fi
            				date
            				sleep 30
            				echo
            				done
            				echo; echo "=====================================================CCv2 Build List======================================================================"
            				./sapccm build list --subscription-code=${ccv2_sub}
            				echo "=========================================================================================================================================="; echo
            				echo "##########################"
            				for i in {1..8}
            				do
            				echo "Build Code: ${ccv2_build_code}"
            				done
            				echo "##########################"
            				echo


      
          				echo " Deploying now"
          				if [ "$ccv2_build_code" == "" ]; then
            					echo ; echo "##############################"
            					echo "Please enter a CCv2 Build Code."
            					echo "##############################"; echo
            					exit 1
          				else
            					echo "##############################"; echo
          				fi
          				echo "$ccv2_database_update_mode"
          				if [ "$ccv2_database_update_mode" == "Yes" ]; then
            					ccv2_database_update_mode="UPDATE"
          				fi
          				if [ "$ccv2_database_update_mode" == "yes" ]; then
            					ccv2_database_update_mode="UPDATE"
          				fi
          				if [ "$ccv2_database_update_mode" != "UPDATE" ]; then
            					ccv2_database_update_mode="NONE"
          				fi
          				echo; echo
          				echo "########################################"
          				echo "########################################"
          				echo "########################################"
          				echo "Started on: `date`"
          				echo "Build Code: ${ccv2_build_code}"
          				echo "Database Update Mode: ${ccv2_database_update_mode}"
          				echo "Environment Code: ${ccv2_env_code}"
          				echo "########################################"
          				echo "########################################"
          				echo "########################################"
          				./sapccm deployment create --build-code=${ccv2_build_code} --database-update-mode=${ccv2_database_update_mode} --environment-code=${ccv2_env_code}  --strategy=${ccv2_database_strategy} --subscription-code=${ccv2_sub} --no-wait
          				retVal=$?
          				if [ $retVal -ne 0 ]; then
            					echo "CCv2 Deployment Error...`date`"
            					exit $retVal
          				fi
          				sleep 40
          				ccv2_deployment_code=""
          				ccv2_deployment_code=`./sapccm deployment list  --subscription-code=${ccv2_sub} |grep " ${ccv2_env_code} " |sort -r | head -1|cut -d' ' -f1`
          				if [ "$ccv2_deployment_code" == "" ]; then
            					echo; echo "Deployment code not found for instance: ${ccv2_env_code} and build code: ${ccv2_build_code}..."; echo
            					exit 1
          				else
            					echo "#################################################"
            					echo "Deployment Code: ${ccv2_deployment_code}"
            					echo "#################################################"
            					echo
          				fi
          				END_SIGN="No"
          				END=135
          				for i in $(seq 1 $END)
          				do 
            				echo $i
            				./sapccm deployment list  --subscription-code=${ccv2_sub} |grep "${ccv2_deployment_code} " > $WORKSPACE/status.txt
            				DEPLOY_SUCCESS=0
            				DEPLOY_SUCCESS=`cat $WORKSPACE/status.txt|grep -v "UNDEPLOYED" |grep "DEPLOYED" |wc -l`
            				cat $WORKSPACE/status.txt
            				if [[ ${DEPLOY_SUCCESS} > 0 ]]; then
              					date ; echo 
              					echo "CCv2 Deployment completed successfully..."; echo
              					END_SIGN="No"
              					break
            				fi
            				DEPLOY_FAIL=0
            				DEPLOY_FAIL=`cat $WORKSPACE/status.txt |grep " FAIL " |wc -l`
            				if [[ ${DEPLOY_FAIL} > 0 ]]; then
              					echo "CCv2 deployment failed..."; echo
              					exit 1
            				fi
            				DEPLOY_FAIL=0
            				DEPLOY_FAIL=`cat $WORKSPACE/status.txt |grep "UNDEPLOYED" |wc -l`
            				if [[ ${DEPLOY_FAIL} > 0 ]]; then
              					echo "CCv2 deployment status UNDEPLOYED..."; echo
              					exit 1
            				fi
            				date
            				sleep 40
            				echo
          				done
          				echo "#################################################"
          				echo "Deployment Code: ${ccv2_deployment_code}"
          				echo "Deployment Complete: `date`"
          				echo "#################################################"
          				echo
          				sleep 40
          				./sapccm deployment show --deployment-code=${ccv2_deployment_code}  --subscription-code=${ccv2_sub}
          				retVal=$?
          				if [ $retVal -ne 0 ]; then
            					echo "CCv2 Deployment Error...`date`"
            					exit $retVal
          				fi
          				sleep 40
          				echo; echo "=====================================================CCv2 Build List======================================================================"
          				./sapccm build list --subscription-code=${ccv2_sub}
          				echo "=========================================================================================================================================="; echo
  
          				echo "##########################"
          				for i in {1..8}
          				do
            				echo "Build Code: ${ccv2_build_code}"
          				done
          				echo "##########################"
          				echo
				'''
					
					
					
				}
            		}
        	}

		stage('Post Deploy Tests') {
			when { expression {env.GIT_BRANCH == 'dev' || propfile['ondemand_deploy'] == "true" }}
			parallel {
				stage('Smoke Test') {
					steps {
					
						script {
							
							if (propfile['smoke_test'] == "true") {
								echo "I am executing Smoke Test on target dev environment post deployment"
				
							/*RESP=`curl -X GET "${bamboo.uri}/RequestsRunning" -H "accept: application/xml" -H "authorization: bearer lR0AA2qfq7v9Ry96vDAgqcer1GPVd5yStmv1_aJVFS43rk06EytB7WsS0_owoiXIgpOXmZVEfkY4ST0JwHtRBk7RH0QRaldWtQT8udC0VdimdGx38RddY2sGaeeF0t9Aflr5rh1Jc_EUfkNK8YrKVxQ6kxB05aCe46CD2fkognv7TiJATmht-ycUjEsd_oy8jH5EK9fmn9eL-wXavNTQcEdsUmFm3-2r3IJDzMK7XCa74qu353yOKLvVyZ1yYQBnc1_fY5GS1BDrFLUZprxpAS30lGEu-d_JTTOQ989UJtIEB3cZzDkIQzeqdYBGCsiDdjdHo2DC1FK2kVPyBITTbQ"`
							echo "The response for current execution status is: $RESP"
							if [ "$RESP" != "[]" ];
							then
							echo "There is a test executing currently in Worksoft. Hence, not proceeding with the execution of Worksoft test cases."
							exit 1
							else
							echo "There are no tests executing right now. Hence, proceeding with Worksoft test execution"
							fi
							# To abort the request before attempting to re-run, uncomment and run below line.
							# abort=$(curl -X PUT -H "Authorization: Bearer $token" -d "" -H "id: ${bamboo.RequestID}" ${bamboo.uri}/Request/${bamboo.RequestID}/abort/)
							guid=$(curl -X PUT -H "Authorization: Bearer $token" -d "" -H "parameters: {TestEnv}{${bamboo.stage_name}}" -H "id: ${bamboo.RequestID}" ${bamboo.uri}/ExecuteRequest/ | tr -d \")
							echo "The GUID is: $guid"
							status=$(curl -X GET -H "Authorization: Bearer $token" -d "" -H "APIRequestID: $guid" ${bamboo.uri}/ExecutionStatus/ | awk -F':' '{print $2}' | tr -d \" | tr -d \})
							echo "The status is: $status"
							while [[ $status != *"Completed"* ]]
							do
							status=$(curl -X GET -H "Authorization: Bearer $token" -d "" -H "APIRequestID: $guid" ${bamboo.uri}/ExecutionStatus/ | awk -F':' '{print $2}' | tr -d \" | tr -d \})
							echo "The status is: $status"
							sleep 15
							done	
							status=$(curl -X GET -H "Authorization: Bearer $token" -d "" -H "APIRequestID: $guid" ${bamboo.uri}/ExecutionStatus/)
							echo "The status is: $status"
							execstatus=$(curl -X GET -H "Authorization: Bearer $token" -d "" -H "APIRequestID: $guid" ${bamboo.uri}/ExecutionStatus/ | awk -F':' '{print $3}' | tr -d \" | tr -d \})
							echo "The exec status is: $execstatus"
							if [[ $execstatus != *Passed* ]];
							then
							echo "Failed"
							exit 1
							else
							echo "Passed"
							exit
							fi
							exit */
						}
					}
				}
				}
				stage('Security Test') {
					when {expression {env.GIT_BRANCH == 'dev' || propfile['ondemand_securitytest'] == "true" }}
					steps {
						echo 'I am running Security Test here'
					}
				}
				stage('Performance Test') {
					when {expression {env.GIT_BRANCH == 'dev' || propfile['ondemand_perfomancetest'] == "true" }}
					steps {
						echo 'I am running Performance Test here'
					}
				}
			}
		}    
  	}
  	post {
	  
		always {
			script {
				if (propfile['javadoc'] == "true") {
					javadoc(javadocDir: "/$WORKSPACE", keepAll: true)
        			}
		  	}
	  	}
	  
        	failure {
			script {
				mail to: propfile['mail_to'],
				cc: propfile['cc_to'],
				subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
				body: "Something is wrong with the ${projectName}-${env.GIT_BRANCH}-Branch-Build-${env.BUILD_NUMBER} Pipeline in the ${FAILED_STAGE} stage.\nBuild URL: ${env.BUILD_URL}"
			}
		}
		success {
			script {
				mail to: propfile['mail_to'],
				cc: propfile['cc_to'],
				subject: "Successful Pipeline: ${currentBuild.fullDisplayName}",
				body: "${projectName}-${env.GIT_BRANCH}-Branch-Build-${env.BUILD_NUMBER} Pipeline has been completed successfuly.\nBuild URL: ${env.BUILD_URL}"
			}
		}
   	}
}
